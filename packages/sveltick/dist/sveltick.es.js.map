{"version":3,"file":"sveltick.es.js","sources":["../src/PerformanceTracker.js","../src/ActivityTracker.js"],"sourcesContent":["// Default thresholds and configurations for metrics\nconst defaultThresholds = {\n  fcp: 2000, // Default: 2s for FCP\n  lcp: 2500, // Default: 2.5s for LCP\n  tti: 3000, // Default: 3s for TTI\n  cls: 0.1, // Default: CLS should be below 0.1\n  fid: 100, // Default: 100ms for FID\n  inp: 200, // Default: 200ms for INP\n  ttfb: 800, // Default: 800ms for TTFB\n  componentRenderTime: 500 // Default: 500ms for component render time\n}\n\nconst MAX_SCORE = 100\n\n// All-in-One Main Function with Presets\nasync function runPerformanceTracker(options = {}) {\n  const {\n    trackMetrics = true, // Enable or disable tracking of all metrics\n    showAlerts = true, // Enable or disable performance alerts\n    enableGamification = true, // Enable or disable gamification\n    thresholds = {} // Allow users to set custom thresholds for alerts\n  } = options\n\n  // Merge user-defined thresholds with defaults\n  const mergedThresholds = { ...defaultThresholds, ...thresholds }\n\n  // Step 1: Track Metrics\n  if (trackMetrics) {\n    await getPerformanceMetrics() // Runs all tracking functions\n    console.log('üìä Performance Metrics:', performanceMetrics)\n  }\n\n  // Step 2: Check Performance Alerts if enabled\n  if (showAlerts) {\n    checkPerformanceAlerts(mergedThresholds)\n  }\n\n  // Step 3: Run Gamification if enabled\n  if (enableGamification) {\n    const score = calculatePerformanceScore()\n    provideFeedback(score)\n  }\n}\n\n// Tracking Metrics Data\nlet performanceMetrics = {\n  firstContentfulPaint: null,\n  timeToInteractive: null,\n  largestContentfulPaint: null,\n  cumulativeLayoutShift: 0,\n  firstInputDelay: null,\n  interactionToNextPaint: null,\n  timeToFirstByte: null,\n  componentRenderTimes: []\n}\n\n// Ensure that all observers and event listeners disconnect when no longer needed\nlet observers = []\n\n// Core Tracker Functions\n\nfunction trackFirstContentfulPaint() {\n  return new Promise((resolve) => {\n    if (typeof window !== 'undefined' && 'PerformanceObserver' in window) {\n      const observer = new PerformanceObserver((list) => {\n        const entry = list.getEntriesByName('first-contentful-paint')[0]\n        if (entry) {\n          const firstContentfulPaintTime = entry.startTime.toFixed(2) // String with 2 decimals\n          resolve(firstContentfulPaintTime)\n          observer.disconnect()\n        }\n      })\n      observer.observe({ type: 'paint', buffered: true })\n    } else {\n      resolve(null) // Return null if not supported\n    }\n  })\n}\n\n// Time to Interactive\nfunction trackTimeToInteractive() {\n  return new Promise((resolve) => {\n    if (typeof window !== 'undefined') {\n      window.addEventListener('load', () => {\n        const tti = performance.now().toFixed(2) // Return formatted value\n        resolve(tti) // Resolve the value\n      })\n\n      if (document.readyState === 'complete') {\n        const ttiFallback = performance.now().toFixed(2) // Fallback value\n        resolve(ttiFallback) // Resolve the value\n      }\n    } else {\n      resolve(null) // Resolve null in unsupported environments\n    }\n  })\n}\n// Largest Contentful Paint\nfunction trackLargestContentfulPaint() {\n  return new Promise((resolve) => {\n    if (typeof window !== 'undefined' && 'PerformanceObserver' in window) {\n      const observer = new PerformanceObserver((list) => {\n        const entries = list.getEntries()\n        const lastEntry = entries[entries.length - 1] // Get the last entry\n        const largestContentfulPaintTime = lastEntry.startTime.toFixed(2) // Format value\n        resolve(largestContentfulPaintTime) // Resolve the value\n        observer.disconnect()\n      })\n      observer.observe({ type: 'largest-contentful-paint', buffered: true })\n    } else {\n      resolve(null) // Resolve null in unsupported environments\n    }\n  })\n}\n\n// Cumulative Layout Shift\nfunction trackCumulativeLayoutShift() {\n  return new Promise((resolve) => {\n    if (typeof window !== 'undefined' && 'PerformanceObserver' in window) {\n      let clsValue = 0\n      const observer = new PerformanceObserver((list) => {\n        list.getEntries().forEach((entry) => {\n          if (!entry.hadRecentInput && entry.value) {\n            clsValue += entry.value\n          }\n        })\n        const clsValueFormatted = clsValue.toFixed(4) // Format CLS to 4 decimals\n        resolve(clsValueFormatted) // Resolve the value\n        observer.disconnect()\n      })\n      observer.observe({ type: 'layout-shift', buffered: true })\n    } else {\n      resolve(null) // Resolve null in SSR or unsupported environments\n    }\n  })\n}\n\n// Track First Input Delay (FID)\nfunction trackFirstInputDelay() {\n  return new Promise((resolve) => {\n    if (typeof window !== 'undefined' && 'PerformanceObserver' in window) {\n      const observer = new PerformanceObserver((list) => {\n        const firstEntry = list.getEntries()[0]\n        const firstInputDelay = (firstEntry.processingStart - firstEntry.startTime).toFixed(2) // Format value\n        resolve(firstInputDelay) // Resolve the value\n        observer.disconnect()\n      })\n\n      observer.observe({ type: 'first-input', buffered: true })\n\n      // Fallback if no user input is captured within 5 seconds\n      setTimeout(() => {\n        if (performanceMetrics.firstInputDelay === null) {\n          console.warn('‚ö†Ô∏è No First Input Delay captured, using default.')\n          resolve(null)\n        }\n      }, 5000)\n    } else {\n      resolve(null) // Resolve null in unsupported environments\n    }\n  })\n}\n\n// Track Interaction to Next Paint (INP)\nfunction trackInteractionToNextPaint() {\n  return new Promise((resolve) => {\n    let interactionOccurred = false\n    const handleInteraction = (event) => {\n      const inp = (performance.now() - event.timeStamp).toFixed(2) // Format value\n      resolve(inp) // Resolve the value\n      interactionOccurred = true\n      window.removeEventListener('click', handleInteraction)\n    }\n\n    window.addEventListener('click', handleInteraction)\n\n    setTimeout(() => {\n      if (!interactionOccurred) {\n        console.warn('‚ö†Ô∏è No interaction occurred or INP tracking is not supported.')\n        resolve(null) // Resolve null if no interaction occurred\n      }\n    }, 5000) // 3 second timeout as a fallback\n  })\n}\n\n// Time to First Byte (TTFB)\nfunction trackTimeToFirstByte() {\n  return new Promise((resolve) => {\n    if (typeof window !== 'undefined') {\n      const ttfb = (performance.timing.responseStart - performance.timing.requestStart).toFixed(2) // Format value\n      resolve(ttfb) // Resolve the value\n    } else {\n      resolve(null) // Resolve null in unsupported environments\n    }\n  })\n}\n\n// Track Component Render Times\nfunction trackComponentRender(name, renderTime) {\n  performanceMetrics.componentRenderTimes.push({ name, renderTime })\n  return {\n    name,\n    renderTime: renderTime.toFixed(2) // Format render time to 2 decimal places\n  }\n}\n\n// Performance Alerts - Skip missing metrics\nfunction checkPerformanceAlerts(thresholds = {}) {\n  const { fcp, lcp, tti, cls, fid, inp, ttfb, componentRenderTime } =\n    thresholds || defaultThresholds\n\n  if (\n    performanceMetrics.firstContentfulPaint != null &&\n    performanceMetrics.firstContentfulPaint > fcp\n  ) {\n    console.warn(\n      `‚ö†Ô∏è FCP of ${performanceMetrics.firstContentfulPaint} ms exceeded threshold of ${fcp} ms`\n    )\n  }\n\n  if (\n    performanceMetrics.largestContentfulPaint != null &&\n    performanceMetrics.largestContentfulPaint > lcp\n  ) {\n    console.warn(\n      `‚ö†Ô∏è LCP of ${performanceMetrics.largestContentfulPaint} ms exceeded threshold of ${lcp} ms`\n    )\n  }\n\n  if (performanceMetrics.timeToInteractive != null && performanceMetrics.timeToInteractive > tti) {\n    console.warn(\n      `‚ö†Ô∏è TTI of ${performanceMetrics.timeToInteractive} ms exceeded threshold of ${tti} ms`\n    )\n  }\n\n  if (\n    performanceMetrics.cumulativeLayoutShift != null &&\n    performanceMetrics.cumulativeLayoutShift > cls\n  ) {\n    console.warn(\n      `‚ö†Ô∏è CLS of ${performanceMetrics.cumulativeLayoutShift} exceeded threshold of ${cls}`\n    )\n  }\n\n  if (performanceMetrics.firstInputDelay != null && performanceMetrics.firstInputDelay > fid) {\n    console.warn(\n      `‚ö†Ô∏è FID of ${performanceMetrics.firstInputDelay} ms exceeded threshold of ${fid} ms`\n    )\n  }\n\n  if (\n    performanceMetrics.interactionToNextPaint != null &&\n    performanceMetrics.interactionToNextPaint > inp\n  ) {\n    console.warn(\n      `‚ö†Ô∏è INP of ${performanceMetrics.interactionToNextPaint} ms exceeded threshold of ${inp} ms`\n    )\n  }\n\n  if (performanceMetrics.timeToFirstByte != null && performanceMetrics.timeToFirstByte > ttfb) {\n    console.warn(\n      `‚ö†Ô∏è TTFB of ${performanceMetrics.timeToFirstByte} ms exceeded threshold of ${ttfb} ms`\n    )\n  }\n\n  performanceMetrics.componentRenderTimes.forEach(({ name, renderTime }) => {\n    if (renderTime > componentRenderTime) {\n      console.warn(\n        `‚ö†Ô∏è Component ${name} render time of ${renderTime} ms exceeded threshold of ${componentRenderTime} ms`\n      )\n    }\n  })\n}\n\n// Calculate Performance Score - Skip missing metrics\nfunction calculatePerformanceScore() {\n  let score = MAX_SCORE\n\n  const metricDifferences = [\n    (performanceMetrics.firstContentfulPaint - defaultThresholds.fcp) / 100,\n    (performanceMetrics.largestContentfulPaint - defaultThresholds.lcp) / 100,\n    (performanceMetrics.timeToInteractive - defaultThresholds.tti) / 100,\n    (performanceMetrics.cumulativeLayoutShift - defaultThresholds.cls) * 100,\n    (performanceMetrics.firstInputDelay - defaultThresholds.fid) / 100,\n    (performanceMetrics.interactionToNextPaint - defaultThresholds.inp) / 100,\n    (performanceMetrics.timeToFirstByte - defaultThresholds.ttfb) / 100\n  ]\n\n  metricDifferences.forEach((diff) => {\n    if (diff > 0) score -= diff\n  })\n\n  performanceMetrics.componentRenderTimes.forEach(({ renderTime }) => {\n    const diff = (renderTime - defaultThresholds.componentRenderTime) / 100\n    if (diff > 0) score -= diff\n  })\n\n  return Math.max(0, Math.round(score)) // Ensure score doesn't go below 0\n}\n\n// Provide Feedback\nfunction provideFeedback(score) {\n  const feedbackMap = [\n    {\n      threshold: 90,\n      message: `üèÜ Excellent! Your score is ${score}/100. Keep up the great work!`\n    },\n    {\n      threshold: 70,\n      message: `üëç Good job! Your score is ${score}/100. Some improvements needed.`\n    },\n    {\n      threshold: 0,\n      message: `‚ö†Ô∏è Needs Improvement! Your score is ${score}/100. Optimize for better performance.`\n    }\n  ]\n\n  const feedback = feedbackMap.find((fb) => score >= fb.threshold)\n  console.log(feedback?.message)\n}\n\n// Run Gamification\nasync function runGamification() {\n  await getPerformanceMetrics() // Ensure metrics are gathered first\n  const score = calculatePerformanceScore()\n  provideFeedback(score)\n}\n\n// Automatically rerun all tracking functions when calling getPerformanceMetrics\nasync function getPerformanceMetrics() {\n  const [\n    firstContentfulPaint,\n    timeToInteractive,\n    largestContentfulPaint,\n    cumulativeLayoutShift,\n    firstInputDelay,\n    interactionToNextPaint,\n    timeToFirstByte\n  ] = await Promise.all([\n    trackFirstContentfulPaint(),\n    trackTimeToInteractive(),\n    trackLargestContentfulPaint(),\n    trackCumulativeLayoutShift(),\n    trackFirstInputDelay(),\n    trackInteractionToNextPaint(),\n    trackTimeToFirstByte()\n  ])\n\n  // Update the global performanceMetrics object instead of re-declaring it\n  performanceMetrics = {\n    ...performanceMetrics, // Keep existing component render times and other properties\n    firstContentfulPaint,\n    timeToInteractive,\n    largestContentfulPaint,\n    cumulativeLayoutShift,\n    firstInputDelay,\n    interactionToNextPaint,\n    timeToFirstByte\n  }\n\n  return performanceMetrics\n}\n\n// Expose functions for custom use\nexport {\n  runPerformanceTracker, // All-in-one function\n  getPerformanceMetrics, // Track metrics manually\n  trackFirstContentfulPaint,\n  trackTimeToInteractive,\n  trackLargestContentfulPaint,\n  trackCumulativeLayoutShift,\n  trackFirstInputDelay,\n  trackInteractionToNextPaint,\n  trackTimeToFirstByte,\n  trackComponentRender,\n  checkPerformanceAlerts,\n  calculatePerformanceScore,\n  runGamification\n}\n","// Utility to check if code is running in a browser environment\nfunction isBrowser() {\n  return typeof window !== 'undefined' && typeof window.localStorage !== 'undefined'\n}\n\n// Initialize traffic sources from localStorage, or default values if they don't exist\nlet trafficSources = isBrowser()\n  ? JSON.parse(localStorage.getItem('trafficSources')) || {\n      Direct: 0,\n      Google: 0,\n      Facebook: 0,\n      Others: 0\n    }\n  : { Direct: 0, Google: 0, Facebook: 0, Others: 0 }\n\n// Initialize other tracking values from localStorage\nlet pageViewCount = isBrowser() ? parseInt(localStorage.getItem('pageViewCount')) || 0 : 0\nlet uniqueVisitors = isBrowser()\n  ? new Set(JSON.parse(localStorage.getItem('uniqueVisitors')) || [])\n  : new Set()\nlet routeViews = isBrowser() ? JSON.parse(localStorage.getItem('routeViews')) || [] : []\n\n// Track page views and update in localStorage, only in browser\nfunction trackPageView() {\n  if (isBrowser()) {\n    const updatedPageViewCount = pageViewCount + 1\n    localStorage.setItem('pageViewCount', updatedPageViewCount)\n    return updatedPageViewCount\n  }\n  return 0 // Return 0 if not in browser\n}\n\n// Get page view count\nfunction getPageViews() {\n  return isBrowser() ? parseInt(localStorage.getItem('pageViewCount')) || 0 : 0\n}\n\n// Track unique visitors using localStorage to persist visitorId, only in browser\nfunction trackUniqueVisitors() {\n  if (isBrowser()) {\n    let visitorId = localStorage.getItem('visitorId')\n    if (!visitorId) {\n      visitorId = `${Date.now()}-${Math.random().toString(36).substring(2, 15)}`\n      localStorage.setItem('visitorId', visitorId)\n    }\n    uniqueVisitors.add(visitorId)\n    localStorage.setItem('uniqueVisitors', JSON.stringify([...uniqueVisitors]))\n    return uniqueVisitors.size\n  }\n  return 0 // Return 0 if not in browser\n}\n\n// Get unique visitor count\nfunction getUniqueVisitors() {\n  return isBrowser() ? JSON.parse(localStorage.getItem('uniqueVisitors')).length || 0 : 0\n}\n\n// Track all viewed routes and associate with the user ID, but prevent duplicate routes\nfunction trackRouteView(route) {\n  if (isBrowser()) {\n    const newRoute = { route, timestamp: Date.now() }\n\n    // Only add the route if it hasn't been tracked in this session\n    if (!routeViews.find((view) => view.route === route)) {\n      routeViews.push(newRoute) // Add the new route view along with the user ID\n      localStorage.setItem('routeViews', JSON.stringify(routeViews)) // Save updated route views to localStorage\n    }\n    return routeViews\n  }\n  return [] // Return empty array if not in browser\n}\n\n// Get all route views\nfunction getRouteViews() {\n  return isBrowser() ? JSON.parse(localStorage.getItem('routeViews')) || [] : []\n}\n\n// Track the source of traffic and update in localStorage\nfunction trackSourceOfTraffic() {\n  if (isBrowser()) {\n    // Only track the source once per session\n    if (!sessionStorage.getItem('trackedTrafficSource')) {\n      const referrer = document.referrer.toLowerCase()\n\n      if (!referrer) {\n        trafficSources.Direct++ // No referrer means Direct visit\n      } else if (referrer.includes('google')) {\n        trafficSources.Google++ // Referrer from Google\n      } else if (referrer.includes('facebook')) {\n        trafficSources.Facebook++ // Referrer from Facebook\n      } else {\n        trafficSources.Others++ // Any other referrer is counted as Others\n      }\n\n      // Mark the traffic source as tracked for this session\n      sessionStorage.setItem('trackedTrafficSource', 'true')\n    }\n\n    // Store updated traffic sources in localStorage\n    localStorage.setItem('trafficSources', JSON.stringify(trafficSources))\n\n    // Return the current traffic sources for use\n    return trafficSources\n  }\n\n  // Default return if not in a browser environment\n  return { Direct: 0, Google: 0, Facebook: 0, Others: 0 }\n}\n\n// Get traffic sources\nfunction getTrafficSources() {\n  return isBrowser()\n    ? JSON.parse(localStorage.getItem('trafficSources')) || trafficSources\n    : { Direct: 0, Google: 0, Facebook: 0, Others: 0 }\n}\n\n// Track all activities and return an object with data\nfunction trackAllActivities() {\n  return {\n    pageViews: trackPageView(),\n    uniqueVisitors: trackUniqueVisitors(),\n    routeViews: trackRouteView(window.location.pathname),\n    trafficSources: trackSourceOfTraffic()\n  }\n}\n// Expose functions for custom use\nexport {\n  trackAllActivities, // Track all activities at once\n  getPageViews, // Get total page views\n  getUniqueVisitors, // Get total unique visitors\n  getRouteViews, // Get all route views\n  getTrafficSources // Get traffic sources\n}\n"],"names":["defaultThresholds","fcp","lcp","tti","cls","fid","inp","ttfb","componentRenderTime","async","runPerformanceTracker","options","trackMetrics","showAlerts","enableGamification","thresholds","mergedThresholds","getPerformanceMetrics","console","log","performanceMetrics","checkPerformanceAlerts","provideFeedback","calculatePerformanceScore","firstContentfulPaint","timeToInteractive","largestContentfulPaint","cumulativeLayoutShift","firstInputDelay","interactionToNextPaint","timeToFirstByte","componentRenderTimes","trackFirstContentfulPaint","Promise","resolve","window","observer","PerformanceObserver","list","entry","getEntriesByName","firstContentfulPaintTime","startTime","toFixed","disconnect","observe","type","buffered","trackTimeToInteractive","addEventListener","performance","now","document","readyState","ttiFallback","trackLargestContentfulPaint","entries","getEntries","largestContentfulPaintTime","length","trackCumulativeLayoutShift","clsValue","forEach","hadRecentInput","value","clsValueFormatted","trackFirstInputDelay","firstEntry","processingStart","setTimeout","warn","trackInteractionToNextPaint","interactionOccurred","handleInteraction","event","timeStamp","removeEventListener","trackTimeToFirstByte","timing","responseStart","requestStart","trackComponentRender","name","renderTime","push","score","diff","Math","max","round","feedback","threshold","message","find","fb","runGamification","all","isBrowser","localStorage","trafficSources","JSON","parse","getItem","Direct","Google","Facebook","Others","pageViewCount","parseInt","uniqueVisitors","Set","routeViews","trackPageView","updatedPageViewCount","setItem","getPageViews","trackUniqueVisitors","visitorId","Date","random","toString","substring","add","stringify","size","getUniqueVisitors","trackRouteView","route","newRoute","timestamp","view","getRouteViews","trackSourceOfTraffic","sessionStorage","referrer","toLowerCase","includes","getTrafficSources","trackAllActivities","pageViews","location","pathname"],"mappings":"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"}